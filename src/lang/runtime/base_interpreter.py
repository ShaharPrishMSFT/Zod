"""
Auto-generated base interpreter for grammar.lark.
This class walks the parse tree, recursively visiting all children.
DO NOT EDIT THIS FILE DIRECTLY. Re-run generate_base_walker.py to update.
"""

from lark import Transformer

class BaseInterpreter(Transformer):
    """
    Base interpreter that walks the parse tree.
    Override methods in a subclass to implement semantics.
    """

    def __natural_inner_star_2(self, children):
        # Walk children for rule: __natural_inner_star_2
        return [self._transform_child(child) for child in children]


    def __start_star_0(self, children):
        # Walk children for rule: __start_star_0
        return [self._transform_child(child) for child in children]


    def __stmt_list_star_1(self, children):
        # Walk children for rule: __stmt_list_star_1
        return [self._transform_child(child) for child in children]


    def context_body(self, children):
        # Walk children for rule: context_body
        return [self._transform_child(child) for child in children]


    def context_decl(self, children):
        # Walk children for rule: context_decl
        return [self._transform_child(child) for child in children]


    def double_expr(self, children):
        # Walk children for rule: double_expr
        return [self._transform_child(child) for child in children]


    def else_part(self, children):
        # Walk children for rule: else_part
        return [self._transform_child(child) for child in children]


    def function_decl(self, children):
        # Walk children for rule: function_decl
        return [self._transform_child(child) for child in children]


    def if_condition(self, children):
        # Walk children for rule: if_condition
        return [self._transform_child(child) for child in children]


    def if_stmt(self, children):
        # Walk children for rule: if_stmt
        return [self._transform_child(child) for child in children]


    def inline_action(self, children):
        # Walk children for rule: inline_action
        return [self._transform_child(child) for child in children]


    def inline_input(self, children):
        # Walk children for rule: inline_input
        return [self._transform_child(child) for child in children]


    def natural_action(self, children):
        # Walk children for rule: natural_action
        return [self._transform_child(child) for child in children]


    def natural_block(self, children):
        # Walk children for rule: natural_block
        return [self._transform_child(child) for child in children]


    def natural_inner(self, children):
        # Walk children for rule: natural_inner
        return [self._transform_child(child) for child in children]


    def rule_decl(self, children):
        # Walk children for rule: rule_decl
        return [self._transform_child(child) for child in children]


    def start(self, children):
        # Walk children for rule: start
        return [self._transform_child(child) for child in children]


    def stmt(self, children):
        # Walk children for rule: stmt
        return [self._transform_child(child) for child in children]


    def stmt_list(self, children):
        # Walk children for rule: stmt_list
        return [self._transform_child(child) for child in children]


    def then_part(self, children):
        # Walk children for rule: then_part
        return [self._transform_child(child) for child in children]


    def when_stmt(self, children):
        # Walk children for rule: when_stmt
        return [self._transform_child(child) for child in children]


    def _transform_child(self, child):
        if hasattr(child, 'children'):
            # Recursively transform subtrees
            return self.transform(child)
        return child
