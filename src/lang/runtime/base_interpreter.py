"""
Auto-generated base interpreter for grammar.lark.
This class walks the parse tree, recursively visiting all children.
DO NOT EDIT THIS FILE DIRECTLY. Re-run generate_base_walker.py to update.
"""

from lark import Transformer

class BaseInterpreter(Transformer):
    """
    Base interpreter that walks the parse tree.
    Override methods in a subclass to implement semantics.
    """

    def __formal_block_star_2(self, children):
        # Walk children for rule: __formal_block_star_2
        return [self._transform_child(child) for child in children]


    def __natural_block_star_1(self, children):
        # Walk children for rule: __natural_block_star_1
        return [self._transform_child(child) for child in children]


    def __start_star_0(self, children):
        # Walk children for rule: __start_star_0
        return [self._transform_child(child) for child in children]


    def action_body(self, children):
        # Walk children for rule: action_body
        return [self._transform_child(child) for child in children]


    def action_stmt(self, children):
        # Walk children for rule: action_stmt
        return [self._transform_child(child) for child in children]


    def block_expr(self, children):
        # Walk children for rule: block_expr
        return [self._transform_child(child) for child in children]


    def body(self, children):
        # Walk children for rule: body
        return [self._transform_child(child) for child in children]


    def context_decl(self, children):
        # Walk children for rule: context_decl
        return [self._transform_child(child) for child in children]


    def decl(self, children):
        # Walk children for rule: decl
        return [self._transform_child(child) for child in children]


    def formal_block(self, children):
        # Walk children for rule: formal_block
        return [self._transform_child(child) for child in children]


    def function_decl(self, children):
        # Walk children for rule: function_decl
        return [self._transform_child(child) for child in children]


    def id_expr(self, children):
        # Walk children for rule: id_expr
        return [self._transform_child(child) for child in children]


    def if_stmt(self, children):
        # Walk children for rule: if_stmt
        return [self._transform_child(child) for child in children]


    def inline_expr(self, children):
        # Walk children for rule: inline_expr
        return [self._transform_child(child) for child in children]


    def input_body(self, children):
        # Walk children for rule: input_body
        return [self._transform_child(child) for child in children]


    def input_stmt(self, children):
        # Walk children for rule: input_stmt
        return [self._transform_child(child) for child in children]


    def nat_line(self, children):
        # Walk children for rule: nat_line
        return [self._transform_child(child) for child in children]


    def natural_block(self, children):
        # Walk children for rule: natural_block
        return [self._transform_child(child) for child in children]


    def natural_expr(self, children):
        # Walk children for rule: natural_expr
        return [self._transform_child(child) for child in children]


    def nop_stmt(self, children):
        # Walk children for rule: nop_stmt
        return [self._transform_child(child) for child in children]


    def rule_decl(self, children):
        # Walk children for rule: rule_decl
        return [self._transform_child(child) for child in children]


    def start(self, children):
        # Walk children for rule: start
        return [self._transform_child(child) for child in children]


    def stmt(self, children):
        # Walk children for rule: stmt
        return [self._transform_child(child) for child in children]


    def when_stmt(self, children):
        # Walk children for rule: when_stmt
        return [self._transform_child(child) for child in children]


    def _transform_child(self, child):
        if hasattr(child, 'children'):
            # Recursively transform subtrees
            return self.transform(child)
        return child
