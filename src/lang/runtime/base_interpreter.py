"""
Auto-generated base interpreter for grammar.lark.
This class walks the parse tree, recursively visiting all children.
DO NOT EDIT THIS FILE DIRECTLY. Re-run generate_base_walker.py to update.
"""

GRAMMAR_HASH = "3ebfba8252c9e891"

from lark import Transformer

class BaseInterpreter(Transformer):
    """
    Base interpreter that walks the parse tree.
    Override methods in a subclass to implement semantics.
    """

    def __formal_block_star_2(self, children):
        # Walk children for rule: __formal_block_star_2
        return [self._transform_child(child) for child in children]


    def __natural_block_star_3(self, children):
        # Walk children for rule: __natural_block_star_3
        return [self._transform_child(child) for child in children]


    def __start_star_0(self, children):
        # Walk children for rule: __start_star_0
        return [self._transform_child(child) for child in children]


    def __start_star_1(self, children):
        # Walk children for rule: __start_star_1
        return [self._transform_child(child) for child in children]


    def context_statement(self, children):
        # Walk children for rule: context_statement
        return [self._transform_child(child) for child in children]


    def else_clause(self, children):
        # Walk children for rule: else_clause
        return [self._transform_child(child) for child in children]


    def formal_block(self, children):
        # Walk children for rule: formal_block
        return [self._transform_child(child) for child in children]


    def if_else_statement(self, children):
        # Walk children for rule: if_else_statement
        return [self._transform_child(child) for child in children]


    def if_statement(self, children):
        # Walk children for rule: if_statement
        return [self._transform_child(child) for child in children]


    def natural_block(self, children):
        # Walk children for rule: natural_block
        return [self._transform_child(child) for child in children]


    def natural_inline(self, children):
        # Walk children for rule: natural_inline
        return [self._transform_child(child) for child in children]


    def return_statement(self, children):
        # Walk children for rule: return_statement
        return [self._transform_child(child) for child in children]


    def start(self, children):
        # Walk children for rule: start
        return [self._transform_child(child) for child in children]


    def statement(self, children):
        # Walk children for rule: statement
        return [self._transform_child(child) for child in children]


    def while_statement(self, children):
        # Walk children for rule: while_statement
        return [self._transform_child(child) for child in children]


    def _transform_child(self, child):
        if hasattr(child, 'children'):
            # Recursively transform subtrees
            return self.transform(child)
        return child
