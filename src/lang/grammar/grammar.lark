# ---------- Entry point ----------
start: (_NL | COMMENT | statement (_NL | COMMENT)*)*

# ---------- Statements ----------
statement: context_statement
         | if_else_statement
         | if_statement
         | while_statement
         | return_statement

# context …                              
context_statement: "context" ID? natural_inline _NL
                 | "context" ID? _NL natural_block

# ifelse … else …
if_else_statement: "ifelse" natural_inline formal_block else_clause _NL
                 | "ifelse" _NL natural_block formal_block else_clause _NL

# if …
if_statement: "if" natural_inline formal_block _NL
            | "if" _NL natural_block formal_block _NL

# while …
while_statement: "while" natural_inline formal_block _NL
               | "while" _NL natural_block formal_block _NL

# return …
return_statement: "return" natural_inline _NL
                | "return" _NL natural_block _NL

else_clause: _NL "else" formal_block      # unchanged

# ---------- Blocks ----------
formal_block: _NL BEGIN_FORMAL _NL [(_NL | COMMENT | statement)*] END_FORMAL

# ---------- Natural language fragments ----------
natural_inline: "[" /[^\[\]\n\r]+/ "]"
natural_block: BEGIN_NAT _NL /[^\n\r]+/ (_NL /[^\n\r]+/)* _NL? END_NAT

# ---------- Terminals & extras ----------
BEGIN_NAT: "--begin"
END_NAT: "--end"
BEGIN_FORMAL: "{"
END_FORMAL: "}"
ID: /[A-Za-z_][A-Za-z0-9_]*(\.[A-Za-z0-9_]+)*/

COMMENT: /#[^\n]*/
%import common.NEWLINE
%import common.WS_INLINE
_NL: WS? NEWLINE
WS: /[ \t]+/
%ignore WS_INLINE
