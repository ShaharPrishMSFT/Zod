// ----------  Tokens ----------
COMMENT          : /[ \t]*#[^\n]*/            // any line‑comment (may start with spaces or tabs)
INLINE_TEXT      : "[" /[^\]\n]*/ "]"         // text used by inline action/input
EMBED_EXPR       : "{{"  /[^}]*/  "}}"        // formal expression embedded in natural text
ID               : /[A-Za-z_][A-Za-z0-9_.]*/  // dotted or simple identifier

NAT_TEXT_LINE    : /(?!--end\b)(?!{{).*?/     // any text line that is not an --end or {{ … }} start
NAT_LINE         : NAT_TEXT_LINE | EMBED_EXPR // one line inside a natural block

_NL              : /(\r?\n)+/
_WS              : /[ \t]+/

%ignore _WS
%ignore COMMENT

// ----------  Entry ----------
start            : (_NL | COMMENT | decl)*

decl             : context_decl
                 | function_decl
                 | rule_decl

// ----------  Top‑level declarations ----------
context_decl     : "context" ID? body
function_decl    : "function" ID  body
rule_decl        : "rule"    ID? body

// ----------  Bodies ----------
body             : natural_block
                 | formal_block

// Natural‑language body: --begin … --end
natural_block    : _NL? "--begin" _NL NAT_LINE* "--end" _NL?

// Formal curly‑brace block
formal_block     : _NL? "{" _NL stmt* "}" _NL?

// ----------  Statement list inside { … } ----------
stmt             : _NL
                 | action_stmt
                 | input_stmt
                 | if_stmt
                 | when_stmt
                 | nop_stmt
                 | COMMENT

// ----------  Primitive statements ----------
action_stmt      : "action" action_body
input_stmt       : "input"  input_body
nop_stmt         : "nop"

action_body      : INLINE_TEXT              // inline: action [x]
                 | natural_block            // action --begin … --end
                 | formal_block             // action { … }

input_body       : INLINE_TEXT
                 | natural_block
                 | formal_block

// ----------  Control flow ----------
if_stmt          : "if" expr "then" formal_block
                   ("else" formal_block)?

when_stmt        : "when" expr "then" formal_block

// ----------  Expressions (minimal for now) ----------
expr             : INLINE_TEXT              -> inline_expr
                 | natural_block            -> natural_expr
                 | formal_block             -> block_expr
                 | ID                       -> id_expr
