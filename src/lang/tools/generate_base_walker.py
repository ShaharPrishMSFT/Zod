"""
Script to auto-generate a base interpreter (tree walker) for the grammar in src/lang/grammar/grammar.lark.
Outputs src/lang/interpreter/base_interpreter.py.
"""

import os
from lark import Lark, Transformer

GRAMMAR_PATH = os.path.join(os.path.dirname(__file__), '..', 'grammar', 'grammar.lark')
OUTPUT_PATH = os.path.join(os.path.dirname(__file__), '..', 'interpreter', 'base_interpreter.py')

HEADER = '''"""
Auto-generated base interpreter for grammar.lark.
This class walks the parse tree, recursively visiting all children.
DO NOT EDIT THIS FILE DIRECTLY. Re-run generate_base_walker.py to update.
"""

from lark import Transformer

class BaseInterpreter(Transformer):
    """
    Base interpreter that walks the parse tree.
    Override methods in a subclass to implement semantics.
    """
'''

METHOD_TEMPLATE = '''
    def {rule}(self, children):
        # Walk children for rule: {rule}
        return [self._transform_child(child) for child in children]

'''

AUX_METHOD = '''
    def _transform_child(self, child):
        if hasattr(child, 'children'):
            # Recursively transform subtrees
            return self.transform(child)
        return child
'''

def main():
    parser = Lark.open(GRAMMAR_PATH, parser="lalr", propagate_positions=True, maybe_placeholders=False)
    rules = sorted({rule.alias or rule.origin.name for rule in parser.rules})

    with open(OUTPUT_PATH, 'w', encoding='utf-8') as f:
        f.write(HEADER)
        for rule in rules:
            if rule is not None:
                f.write(METHOD_TEMPLATE.format(rule=rule))
        f.write(AUX_METHOD)

    print(f"Base interpreter generated at: {OUTPUT_PATH}")

if __name__ == "__main__":
    main()
